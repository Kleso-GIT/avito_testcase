{
	"info": {
		"_postman_id": "30e26ea6-a4e7-43ad-8cc3-056013388d72",
		"name": "Avito_merch_shop_test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26586312"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, username, coins, inventory, coin_history\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.username).to.exist;\r",
							"    pm.expect(responseData.coins).to.exist;\r",
							"    pm.expect(responseData.inventory).to.exist;\r",
							"    pm.expect(responseData.coin_history).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Username should be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"string\",\r\n  \"password\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register one more user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"string2\",\r\n  \"password\": \"string2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register already Registered User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains the message 'Имя пользователя уже занято'\", function () {\r",
							"  var responseBody = pm.response.json();\r",
							"  pm.expect(responseBody.detail).to.equal('Имя пользователя уже занято');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"string\",\r\n  \"password\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check if response contains a token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).to.not.be.empty;\r",
							"});\r",
							"\r",
							"const jsonResponse = pm.response.json();\r",
							"pm.collectionVariables.set(\"auth_token\", jsonResponse.token); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "string",
							"type": "text"
						},
						{
							"key": "password",
							"value": "string",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/auth",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - coins, inventory, and coinHistory\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.coins).to.exist;\r",
							"    pm.expect(responseData.inventory).to.exist;\r",
							"    pm.expect(responseData.coinHistory).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Coins field is present and has a value of at least 1000\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.have.property('coins').that.is.a('number').and.is.at.least(1000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "string",
							"type": "text"
						},
						{
							"key": "password",
							"value": "string",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/info",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy_test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "string",
							"type": "text"
						},
						{
							"key": "password",
							"value": "string",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/buy/cup",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"buy",
						"cup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check is transaction Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - coins, inventory, and coinHistory\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.coins).to.exist;\r",
							"    pm.expect(responseData.inventory).to.exist;\r",
							"    pm.expect(responseData.coinHistory).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test to check the value of coins and the non-empty sent transactions list\r",
							"pm.test(\"Coins field has a value of 980\", function () {\r",
							"    pm.expect(pm.response.json().coins).to.equal(980);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sent transactions list contains the entry: { 'toUser': 'System', 'amount': 20 }\", function () {\r",
							"    const sentTransactions = pm.response.json().coinHistory.sent;\r",
							"  \r",
							"    const isEntryPresent = sentTransactions.some((transaction) => {\r",
							"        return transaction.toUser === \"System\" && transaction.amount === 20;\r",
							"    });\r",
							"\r",
							"    pm.expect(isEntryPresent).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "string",
							"type": "text"
						},
						{
							"key": "password",
							"value": "string",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/info",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sent_coin_test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"toUser\": \"string2\",\r\n  \"amount\": 9\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/sendCoin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"sendCoin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sent_coin_to_not_existed_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"toUser\": \"string999\",\r\n  \"amount\": 9\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/sendCoin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"sendCoin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check is send Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - coins, inventory, and coinHistory\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.coins).to.exist;\r",
							"    pm.expect(responseData.inventory).to.exist;\r",
							"    pm.expect(responseData.coinHistory).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test to check the value of coins and the non-empty sent transactions list\r",
							"pm.test(\"Coins field has a value of 980\", function () {\r",
							"    pm.expect(pm.response.json().coins).to.equal(971);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sent transactions list contains the entry: { 'toUser': 'string2', 'amount': 9 }\", function () {\r",
							"    const sentTransactions = pm.response.json().coinHistory.sent;\r",
							"  \r",
							"    const isEntryPresent = sentTransactions.some((transaction) => {\r",
							"        return transaction.toUser === \"System\" && transaction.amount === 20;\r",
							"    });\r",
							"\r",
							"    pm.expect(isEntryPresent).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "string",
							"type": "text"
						},
						{
							"key": "password",
							"value": "string",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/info",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth User2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check if response contains a token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).to.not.be.empty;\r",
							"});\r",
							"\r",
							"const jsonResponse = pm.response.json();\r",
							"pm.collectionVariables.set(\"auth_token\", jsonResponse.token); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "string2",
							"type": "text"
						},
						{
							"key": "password",
							"value": "string2",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/auth",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check is money recived",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - coins, inventory, and coinHistory\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.coins).to.exist;\r",
							"    pm.expect(responseData.inventory).to.exist;\r",
							"    pm.expect(responseData.coinHistory).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test to check the value of coins and the non-empty sent transactions list\r",
							"pm.test(\"Coins field has a value of 1009\", function () {\r",
							"    pm.expect(pm.response.json().coins).to.equal(1009);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"received transactions list contains the entry: { 'fromUser': 'string', 'amount': 9 }\", function () {\r",
							"    const receivedTransactions = pm.response.json().coinHistory.received;\r",
							"  \r",
							"    const isEntryPresent = receivedTransactions.some((transaction) => {\r",
							"        return transaction.fromUser === \"string\" && transaction.amount === 9;\r",
							"    });\r",
							"\r",
							"    pm.expect(isEntryPresent).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "string",
							"type": "text"
						},
						{
							"key": "password",
							"value": "string",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/info",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"info"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "auth_token",
			"value": ""
		}
	]
}